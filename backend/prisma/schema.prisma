// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  userid      Int        @id @default(autoincrement())
  userName    String     @unique
  password    String
  name        String
  email       String     @unique
  role        String
  createdAt   DateTime   @default(now())

  // Relations
  department   Department @relation(fields: [departmentId], references: [id])
  departmentId Int
  audits   Audit[]

  documents    Document[]      // documents uploaded
  notifications Notification[]
}

model Department {
  id             Int      @id @default(autoincrement())
  departmentName String   @unique
  users          User[]
  documents      Document[]
}

model Document {
  id             Int               @id @default(autoincrement())
  title          String
  content        String?           // extracted text
  fileUrl        String
  priority       Priority          @default(GREEN)
  createdAt      DateTime          @default(now())
  updatedAt      DateTime          @updatedAt

  // Relations
  uploadedBy     User              @relation(fields: [uploadedById], references: [userid])
  uploadedById   Int

  department     Department?       @relation(fields: [departmentId], references: [id])
  departmentId   Int?

  documentType   DocumentType?     @relation(fields: [documentTypeId], references: [id])
  documentTypeId Int?

  template       Template?         @relation(fields: [templateId], references: [id])
  templateId     Int?

  versions       DocumentVersion[]
  summaries      Summary[]
  translations   Translation[]
  compliance     Compliance[]
  extractedData  ExtractedField[]
  audits   Audit[]

  // Back-relations for specialized documents
  jobCards           JobCard[]
  tenders            Tender[]
  engineeringDrawings EngineeringDrawing[]
  workOrders         WorkOrder[]
  inspectionReports  InspectionReport[]
  safetyNotices      SafetyNotice[]
}


model DocumentType {
  id        Int        @id @default(autoincrement())
  name      String     @unique // Invoice, Job Card, Safety Notice
  documents Document[]
}

model DocumentVersion {
  id          Int      @id @default(autoincrement())
  versionNo   Int
  content     String?
  createdAt   DateTime @default(now())

  // Relations
  document    Document @relation(fields: [documentId], references: [id])
  documentId  Int
}

model Summary {
  id          Int      @id @default(autoincrement())
  summaryText String
  createdAt   DateTime @default(now())

  // Relations
  document    Document @relation(fields: [documentId], references: [id])
  documentId  Int
}

model Translation {
  id             Int      @id @default(autoincrement())
  language       String   // "en"/"ml"
  translatedText String
  createdAt      DateTime @default(now())

  // Relations
  document       Document @relation(fields: [documentId], references: [id])
  documentId     Int
}

model Notification {
  id        Int      @id @default(autoincrement())
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  // Relations
  user      User     @relation(fields: [userId], references: [userid])
  userId    Int
}

model Compliance {
  id          Int      @id @default(autoincrement())
  requirement String   // e.g. Safety Directive
  dueDate     DateTime
  status      String   // pending, completed
  createdAt   DateTime @default(now())

  // Relations
  document    Document @relation(fields: [documentId], references: [id])
  documentId  Int
}

model Template {
  id           Int             @id @default(autoincrement())
  name         String          @unique
  description  String?
  createdAt    DateTime        @default(now())

  // Relations
  fields       TemplateField[]
  documents    Document[]
}

model TemplateField {
  id          Int        @id @default(autoincrement())
  fieldName   String     // e.g. "Invoice Number"
  fieldType   FieldType
  isRequired  Boolean    @default(false)

  // Relations
  template    Template   @relation(fields: [templateId], references: [id])
  templateId  Int
  extracted   ExtractedField[]
}

model ExtractedField {
  id         Int          @id @default(autoincrement())
  value      String

  // Relations
  document   Document     @relation(fields: [documentId], references: [id])
  documentId Int

  field      TemplateField @relation(fields: [fieldId], references: [id])
  fieldId    Int
}
enum Priority {
  RED
  YELLOW
  GREEN
}
enum FieldType {
  TEXT
  NUMBER
  DATE
  BOOLEAN
}

model JobCard {
  id            Int      @id @default(autoincrement())
  jobNumber     String   @unique
  title         String
  description   String
  assignedTo    String
  issuedBy      String?
  dueDate       DateTime?
  status        String   // e.g. "Open", "In Progress", "Completed"
  priority      String?  // optional priority inside JobCard
  remarks       String?  // optional field for notes
  createdAt     DateTime @default(now())

  // Relation to Document
  document      Document @relation(fields: [documentId], references: [id])
  documentId    Int
}
model Tender {
  id              Int      @id @default(autoincrement())
  tenderId        String   @unique     // e.g. 2025_KMRL_782579_1
  tenderNo        String   @unique     // e.g. KMRL/PROC/TENDER/2025-26/038
  nameOfWork      String
  contractValue   Float
  contractDuration String
  sourceOfFunds   String?
  recipient       String?
  bidSecurity     Float
  openingDate     DateTime
  closingDate     DateTime
  preBidMeeting   DateTime?
  scopeOfWork     String
  status          String?             // e.g. Open, Closed, Awarded

  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  // Relation to generic Document
  document        Document @relation(fields: [documentId], references: [id])
  documentId      Int
}

model WorkOrder {
  id             Int      @id @default(autoincrement())
  orderNumber    String
  taskDetails    String
  issuedBy       String
  assignedTo     String?
  department     String?
  priority       String?
  dueDate        DateTime?
  status         WorkOrderStatus
  safetyMeasures String?
  remarks        String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  document       Document @relation(fields: [documentId], references: [id])
  documentId     Int
}

model InspectionReport {
  id              Int      @id @default(autoincrement())
  reportNumber    String
  inspectorName   String
  findings        String
  status          InspectionStatus
  inspectedOn     DateTime
  vesselName      String?
  complianceCheck String?
  surveyType      SurveyType?
  medicalFitness  Boolean?
  remarks         String?
  createdAt       DateTime @default(now())

  // Relations
  document        Document @relation(fields: [documentId], references: [id])
  documentId      Int
}

model SafetyNotice {
  id             Int      @id @default(autoincrement())
  noticeNumber   String
  title          String
  description    String
  severity       NoticeSeverity
  issuedBy       String
  issuedTo       String?
  validFrom      DateTime?
  validUntil     DateTime?
  status         NoticeStatus
  safetyMeasures String?
  emergencyDuty  String?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Relations
  document       Document @relation(fields: [documentId], references: [id])
  documentId     Int
}

model EngineeringDrawing {
  id            Int      @id @default(autoincrement())
  drawingNumber String
  revision      String?
  title         String?
  description   String?
  discipline    String?
  status        DrawingStatus
  preparedBy    String?
  checkedBy     String?
  approvedBy    String?
  approvalDate  DateTime?
  issueDate     DateTime?
  version       Int?
  fileUrl       String?
  remarks       String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  // Relations
  document      Document @relation(fields: [documentId], references: [id])
  documentId    Int
}

model Audit {
  id         Int       @id @default(autoincrement())
  actionType String
  createdAt  DateTime  @default(now())

  // Relations
  user       User      @relation(fields: [userId], references: [userid])
  userId     Int

  document   Document? @relation(fields: [documentId], references: [id])
  documentId Int?
}

// ðŸ”¹ Enums for structured values
enum WorkOrderStatus {
  SCHEDULED
  IN_PROGRESS
  DONE
  CANCELLED
}

enum InspectionStatus {
  PASS
  FAIL
  NEEDS_REVIEW
}

enum SurveyType {
  DRY_DOCK
  SAFETY
  MEDICAL
  CLASSIFICATION
  OTHER
}

enum NoticeSeverity {
  HIGH
  MEDIUM
  LOW
}

enum NoticeStatus {
  ACTIVE
  EXPIRED
  WITHDRAWN
}

enum DrawingStatus {
  PENDING
  APPROVED
  SUPERSEDED
}